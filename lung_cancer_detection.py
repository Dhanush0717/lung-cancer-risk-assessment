# -*- coding: utf-8 -*-
"""lung-cancer-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S730n0RExBZVyAPePAg_rqOFDL_adDqi

# Import Needed Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, classification_report , accuracy_score
from sklearn.model_selection import train_test_split

import warnings
warnings.filterwarnings("ignore")

"""Import the data"""

df=pd.read_csv('/content/survey lung cancer.csv')

from google.colab import drive
drive.mount('/content/drive')

"""read sample of data"""

df.head(10)

df.tail(5)

"""# EDA"""

df.shape

#checking datatypes
df.dtypes

df.describe()

df.describe(include="object")

df.columns.tolist()

df.isnull().sum()

"""check repeated rows"""

df.duplicated().sum()

#remove repeated rows
df.drop_duplicates(inplace=True)
# check that removing is done
df.duplicated().sum()

df['GENDER']=df['GENDER'].replace(['M', 'F'],[0,1])
df['LUNG_CANCER']=df['LUNG_CANCER'].replace(['YES', 'NO'],[1,0])

"""# target column"""

#Patient has lung cancer = 1 , Patient not having lung cancer = 0
df['LUNG_CANCER'].unique()

# Canceled=1, Not canceled= 0
df['LUNG_CANCER'].value_counts()

"""# Show value counts for each coluumn"""

coluumns =['GENDER', 'AGE', 'SMOKING','YELLOW_FINGERS', 'ANXIETY',
       'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE ', 'ALLERGY ', 'WHEEZING',
       'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH',
       'SWALLOWING DIFFICULTY', 'CHEST PAIN']


for col in coluumns:
    d_type = df[col].dtype

    counts =df[col].value_counts()
    print(f"Counts for {col}:")
    print(counts)
    print("============================================================")

"""# Data Visualization

Distribution of numerical columns
"""

num_list=['GENDER', 'AGE', 'SMOKING', 'YELLOW_FINGERS', 'ANXIETY',
       'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE ', 'ALLERGY ', 'WHEEZING',
       'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH',
       'SWALLOWING DIFFICULTY', 'CHEST PAIN']
fig = plt.figure(figsize=(10,20))

for i in range(len(num_list)):
    plt.subplot(6,3,i+1)
    plt.title(num_list[i])
    sns.histplot(data=df,x=df[num_list[i]],hue='LUNG_CANCER')

plt.tight_layout()

#target column
sns.countplot(x=df['LUNG_CANCER'])
plt.title('LUNG CANCER');

#Another graph for "is_canceled" column
plt.pie(df.groupby(by=["LUNG_CANCER"]).size(), labels = df["LUNG_CANCER"].unique(), autopct = "%0.2f")
plt.title('Lung Cancer Disribution');
plt.show()

"""Gender Disription"""

plt.pie(df.groupby(by=["GENDER"]).size(), labels = df["GENDER"].unique(), autopct = "%0.2f")
plt.title('Gender Disription')
plt.show()

"""AGE Disription"""

sns.distplot(df['AGE'])

sns.countplot(x=df['ALCOHOL CONSUMING'])
plt.title('ALCOHOL CONSUMING');

plt.figure(figsize=(12, 6))

sns.countplot(x='ALCOHOL CONSUMING',hue="LUNG_CANCER", data=df,palette='Pastel1')
plt.title("Lung Cancer with Alochol consumption",fontweight="bold", size=10)
plt.show()

sns.countplot(x=df['SMOKING'])
plt.title('SMOKING');

plt.figure(figsize=(12, 6))

sns.countplot(x='SMOKING',hue="LUNG_CANCER", data=df,palette='Pastel1')
plt.title("Relation between smoking and lung cancer",fontweight="bold", size=10)
plt.show()

sns.countplot(x=df['CHRONIC DISEASE'])
plt.title('CHRONIC DISEASE');

plt.figure(figsize=(12, 6))

sns.countplot(x='CHRONIC DISEASE',hue="LUNG_CANCER", data=df,palette='Pastel1')
plt.title("Lung Cancer with CHRONIC DISEASE",fontweight="bold", size=10)
plt.show()

plt.figure(figsize = (15,15))
sns.heatmap(df.corr(),annot=True, cbar=True, cmap='Blues', fmt='.1f');

X = df.drop('LUNG_CANCER', axis=1)
y = df['LUNG_CANCER']

X_train , X_test , y_train , y_test = train_test_split(X , y , test_size=0.2 , random_state=42)

"""# SVM"""

from sklearn import svm
svc = svm.SVC(kernel='linear')
svc.fit(X_train, y_train)

svc.score(X_train , y_train)

svc_pred = svc.predict(X_test)
svc_acc=accuracy_score(y_test , svc_pred)
svc_acc

print(classification_report(y_test , svc_pred))

cm1 = confusion_matrix(y_test,svc_pred)
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10,7))
sns.heatmap(cm1,annot=True)
plt.xlabel('predicted')
plt.ylabel('Truh')

"""# Random Forest"""

RF_model = RandomForestClassifier(n_estimators=100)
RF_model.fit(X_train , y_train)

RF_model.score(X_train , y_train)

RF_pred =RF_model.predict(X_test)
RF_acc=accuracy_score(y_test , RF_pred)
RF_acc

print(classification_report(y_test , RF_pred))

cm2 = confusion_matrix(y_test,RF_pred)
plt.figure(figsize=(10,7))
sns.heatmap(cm1,annot=True)
plt.xlabel('predicted')
plt.ylabel('Truh')

"""# Decision Tree"""

dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)

dt.score(X_train , y_train)

dt_pred = dt.predict(X_test)

DT_acc=accuracy_score(y_test , dt_pred)
DT_acc

print(classification_report(y_test , dt_pred))

cm3 = confusion_matrix(y_test,dt_pred)
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10,7))
sns.heatmap(cm3,annot=True)
plt.xlabel('predicted')
plt.ylabel('Truth')

"""# Models scores"""

models=pd.DataFrame({
    'models':['Random_forest','SVC','Decsion_Treee'],
    'scores':[RF_acc,svc_acc,DT_acc]})
models.sort_values(by='scores',ascending=True)

